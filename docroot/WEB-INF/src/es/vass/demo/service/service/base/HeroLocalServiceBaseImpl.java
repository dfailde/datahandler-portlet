/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of the Liferay Enterprise
 * Subscription License ("License"). You may not use this file except in
 * compliance with the License. You can obtain a copy of the License by
 * contacting Liferay, Inc. See the License for the specific language governing
 * permissions and limitations under the License, including but not limited to
 * distribution rights of the Software.
 *
 *
 *
 */

package es.vass.demo.service.service.base;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.model.PersistedModel;
import com.liferay.portal.service.BaseLocalServiceImpl;
import com.liferay.portal.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.service.persistence.UserPersistence;

import es.vass.demo.service.model.Hero;
import es.vass.demo.service.service.HeroLocalService;
import es.vass.demo.service.service.persistence.HeroPersistence;

import java.io.Serializable;
import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the hero local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link es.vass.demo.service.service.impl.HeroLocalServiceImpl}.
 * </p>
 *
 * @author diego.failde
 * @see es.vass.demo.service.service.impl.HeroLocalServiceImpl
 * @see es.vass.demo.service.service.HeroLocalServiceUtil
 * @generated
 */
public abstract class HeroLocalServiceBaseImpl extends BaseLocalServiceImpl
	implements HeroLocalService, IdentifiableBean {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link es.vass.demo.service.service.HeroLocalServiceUtil} to access the hero local service.
	 */

	/**
	 * Adds the hero to the database. Also notifies the appropriate model listeners.
	 *
	 * @param hero the hero
	 * @return the hero that was added
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public Hero addHero(Hero hero) throws SystemException {
		hero.setNew(true);

		return heroPersistence.update(hero);
	}

	/**
	 * Creates a new hero with the primary key. Does not add the hero to the database.
	 *
	 * @param heroId the primary key for the new hero
	 * @return the new hero
	 */
	@Override
	public Hero createHero(long heroId) {
		return heroPersistence.create(heroId);
	}

	/**
	 * Deletes the hero with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param heroId the primary key of the hero
	 * @return the hero that was removed
	 * @throws PortalException if a hero with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public Hero deleteHero(long heroId) throws PortalException, SystemException {
		return heroPersistence.remove(heroId);
	}

	/**
	 * Deletes the hero from the database. Also notifies the appropriate model listeners.
	 *
	 * @param hero the hero
	 * @return the hero that was removed
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public Hero deleteHero(Hero hero) throws SystemException {
		return heroPersistence.remove(hero);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(Hero.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery)
		throws SystemException {
		return heroPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link es.vass.demo.service.model.impl.HeroModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
		throws SystemException {
		return heroPersistence.findWithDynamicQuery(dynamicQuery, start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link es.vass.demo.service.model.impl.HeroModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
		OrderByComparator orderByComparator) throws SystemException {
		return heroPersistence.findWithDynamicQuery(dynamicQuery, start, end,
			orderByComparator);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery)
		throws SystemException {
		return heroPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) throws SystemException {
		return heroPersistence.countWithDynamicQuery(dynamicQuery, projection);
	}

	@Override
	public Hero fetchHero(long heroId) throws SystemException {
		return heroPersistence.fetchByPrimaryKey(heroId);
	}

	/**
	 * Returns the hero with the matching UUID and company.
	 *
	 * @param uuid the hero's UUID
	 * @param  companyId the primary key of the company
	 * @return the matching hero, or <code>null</code> if a matching hero could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public Hero fetchHeroByUuidAndCompanyId(String uuid, long companyId)
		throws SystemException {
		return heroPersistence.fetchByUuid_C_First(uuid, companyId, null);
	}

	/**
	 * Returns the hero matching the UUID and group.
	 *
	 * @param uuid the hero's UUID
	 * @param groupId the primary key of the group
	 * @return the matching hero, or <code>null</code> if a matching hero could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public Hero fetchHeroByUuidAndGroupId(String uuid, long groupId)
		throws SystemException {
		return heroPersistence.fetchByUUID_G(uuid, groupId);
	}

	/**
	 * Returns the hero with the primary key.
	 *
	 * @param heroId the primary key of the hero
	 * @return the hero
	 * @throws PortalException if a hero with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public Hero getHero(long heroId) throws PortalException, SystemException {
		return heroPersistence.findByPrimaryKey(heroId);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException, SystemException {
		return heroPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns the hero with the matching UUID and company.
	 *
	 * @param uuid the hero's UUID
	 * @param  companyId the primary key of the company
	 * @return the matching hero
	 * @throws PortalException if a matching hero could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public Hero getHeroByUuidAndCompanyId(String uuid, long companyId)
		throws PortalException, SystemException {
		return heroPersistence.findByUuid_C_First(uuid, companyId, null);
	}

	/**
	 * Returns the hero matching the UUID and group.
	 *
	 * @param uuid the hero's UUID
	 * @param groupId the primary key of the group
	 * @return the matching hero
	 * @throws PortalException if a matching hero could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public Hero getHeroByUuidAndGroupId(String uuid, long groupId)
		throws PortalException, SystemException {
		return heroPersistence.findByUUID_G(uuid, groupId);
	}

	/**
	 * Returns a range of all the heros.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link es.vass.demo.service.model.impl.HeroModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of heros
	 * @param end the upper bound of the range of heros (not inclusive)
	 * @return the range of heros
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public List<Hero> getHeros(int start, int end) throws SystemException {
		return heroPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of heros.
	 *
	 * @return the number of heros
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public int getHerosCount() throws SystemException {
		return heroPersistence.countAll();
	}

	/**
	 * Updates the hero in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param hero the hero
	 * @return the hero that was updated
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public Hero updateHero(Hero hero) throws SystemException {
		return heroPersistence.update(hero);
	}

	/**
	 * Returns the hero local service.
	 *
	 * @return the hero local service
	 */
	public es.vass.demo.service.service.HeroLocalService getHeroLocalService() {
		return heroLocalService;
	}

	/**
	 * Sets the hero local service.
	 *
	 * @param heroLocalService the hero local service
	 */
	public void setHeroLocalService(
		es.vass.demo.service.service.HeroLocalService heroLocalService) {
		this.heroLocalService = heroLocalService;
	}

	/**
	 * Returns the hero remote service.
	 *
	 * @return the hero remote service
	 */
	public es.vass.demo.service.service.HeroService getHeroService() {
		return heroService;
	}

	/**
	 * Sets the hero remote service.
	 *
	 * @param heroService the hero remote service
	 */
	public void setHeroService(
		es.vass.demo.service.service.HeroService heroService) {
		this.heroService = heroService;
	}

	/**
	 * Returns the hero persistence.
	 *
	 * @return the hero persistence
	 */
	public HeroPersistence getHeroPersistence() {
		return heroPersistence;
	}

	/**
	 * Sets the hero persistence.
	 *
	 * @param heroPersistence the hero persistence
	 */
	public void setHeroPersistence(HeroPersistence heroPersistence) {
		this.heroPersistence = heroPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user remote service.
	 *
	 * @return the user remote service
	 */
	public com.liferay.portal.service.UserService getUserService() {
		return userService;
	}

	/**
	 * Sets the user remote service.
	 *
	 * @param userService the user remote service
	 */
	public void setUserService(
		com.liferay.portal.service.UserService userService) {
		this.userService = userService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		Class<?> clazz = getClass();

		_classLoader = clazz.getClassLoader();

		PersistedModelLocalServiceRegistryUtil.register("es.vass.demo.service.model.Hero",
			heroLocalService);
	}

	public void destroy() {
		PersistedModelLocalServiceRegistryUtil.unregister(
			"es.vass.demo.service.model.Hero");
	}

	/**
	 * Returns the Spring bean ID for this bean.
	 *
	 * @return the Spring bean ID for this bean
	 */
	@Override
	public String getBeanIdentifier() {
		return _beanIdentifier;
	}

	/**
	 * Sets the Spring bean ID for this bean.
	 *
	 * @param beanIdentifier the Spring bean ID for this bean
	 */
	@Override
	public void setBeanIdentifier(String beanIdentifier) {
		_beanIdentifier = beanIdentifier;
	}

	@Override
	public Object invokeMethod(String name, String[] parameterTypes,
		Object[] arguments) throws Throwable {
		Thread currentThread = Thread.currentThread();

		ClassLoader contextClassLoader = currentThread.getContextClassLoader();

		if (contextClassLoader != _classLoader) {
			currentThread.setContextClassLoader(_classLoader);
		}

		try {
			return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
		}
		finally {
			if (contextClassLoader != _classLoader) {
				currentThread.setContextClassLoader(contextClassLoader);
			}
		}
	}

	protected Class<?> getModelClass() {
		return Hero.class;
	}

	protected String getModelClassName() {
		return Hero.class.getName();
	}

	/**
	 * Performs an SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) throws SystemException {
		try {
			DataSource dataSource = heroPersistence.getDataSource();

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql, new int[0]);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = es.vass.demo.service.service.HeroLocalService.class)
	protected es.vass.demo.service.service.HeroLocalService heroLocalService;
	@BeanReference(type = es.vass.demo.service.service.HeroService.class)
	protected es.vass.demo.service.service.HeroService heroService;
	@BeanReference(type = HeroPersistence.class)
	protected HeroPersistence heroPersistence;
	@BeanReference(type = com.liferay.counter.service.CounterLocalService.class)
	protected com.liferay.counter.service.CounterLocalService counterLocalService;
	@BeanReference(type = com.liferay.portal.service.ResourceLocalService.class)
	protected com.liferay.portal.service.ResourceLocalService resourceLocalService;
	@BeanReference(type = com.liferay.portal.service.UserLocalService.class)
	protected com.liferay.portal.service.UserLocalService userLocalService;
	@BeanReference(type = com.liferay.portal.service.UserService.class)
	protected com.liferay.portal.service.UserService userService;
	@BeanReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	private String _beanIdentifier;
	private ClassLoader _classLoader;
	private HeroLocalServiceClpInvoker _clpInvoker = new HeroLocalServiceClpInvoker();
}